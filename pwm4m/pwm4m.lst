;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 20/11/2016 11:33:18 p. m.
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x29AE      	GOTO       430
_interrupt:
;pwm4m.c,16 :: 		void interrupt() {
0x0004	0x0870      	MOVF       R0, 0
0x0005	0x0020      	MOVLB      0
0x0006	0x00A1      	MOVWF      33
0x0007	0x0871      	MOVF       R1, 0
0x0008	0x00A0      	MOVWF      32
;pwm4m.c,17 :: 		if (PIR1.CCP1IF == 1) {                           // if CCP compare interrupt flag is set
0x0009	0x3180      	MOVLP      0
0x000A	0x1D11      	BTFSS      PIR1, 2
0x000B	0x29A0      	GOTO       L_interrupt0
;pwm4m.c,20 :: 		if ((current_period1 > 0) && (current_period1 < total_period1)){ // if duty is > 0% AND < 100% then:
0x000C	0x0829      	MOVF       _current_period1+3, 0
0x000D	0x3C00      	SUBLW      0
0x000E	0x1D03      	BTFSS      STATUS, 2
0x000F	0x281A      	GOTO       L__interrupt41
0x0010	0x0828      	MOVF       _current_period1+2, 0
0x0011	0x3C00      	SUBLW      0
0x0012	0x1D03      	BTFSS      STATUS, 2
0x0013	0x281A      	GOTO       L__interrupt41
0x0014	0x0827      	MOVF       _current_period1+1, 0
0x0015	0x3C00      	SUBLW      0
0x0016	0x1D03      	BTFSS      STATUS, 2
0x0017	0x281A      	GOTO       L__interrupt41
0x0018	0x0826      	MOVF       _current_period1, 0
0x0019	0x3C00      	SUBLW      0
L__interrupt41:
0x001A	0x1803      	BTFSC      STATUS, 0
0x001B	0x284A      	GOTO       L_interrupt3
0x001C	0x3000      	MOVLW      0
0x001D	0x0229      	SUBWF      _current_period1+3, 0
0x001E	0x1D03      	BTFSS      STATUS, 2
0x001F	0x282A      	GOTO       L__interrupt42
0x0020	0x3000      	MOVLW      0
0x0021	0x0228      	SUBWF      _current_period1+2, 0
0x0022	0x1D03      	BTFSS      STATUS, 2
0x0023	0x282A      	GOTO       L__interrupt42
0x0024	0x3030      	MOVLW      48
0x0025	0x0227      	SUBWF      _current_period1+1, 0
0x0026	0x1D03      	BTFSS      STATUS, 2
0x0027	0x282A      	GOTO       L__interrupt42
0x0028	0x30D4      	MOVLW      212
0x0029	0x0226      	SUBWF      _current_period1, 0
L__interrupt42:
0x002A	0x1803      	BTFSC      STATUS, 0
0x002B	0x284A      	GOTO       L_interrupt3
L__interrupt38:
;pwm4m.c,22 :: 		if (M1 == 1) {                           // if the output was 1 -> was "on-time".
0x002C	0x1C0D      	BTFSS      PORTB, 0
0x002D	0x2840      	GOTO       L_interrupt4
;pwm4m.c,23 :: 		M1 = 0;                                  // set output to 0 in order to achieve "off-time".
0x002E	0x100D      	BCF        PORTB, 0
;pwm4m.c,24 :: 		CCPR = total_period1 - current_period1;     // make it time for "off-time", off-time = full time - on time.
0x002F	0x30D4      	MOVLW      212
0x0030	0x00A2      	MOVWF      _CCPR
0x0031	0x3030      	MOVLW      48
0x0032	0x00A3      	MOVWF      _CCPR+1
0x0033	0x3000      	MOVLW      0
0x0034	0x00A4      	MOVWF      _CCPR+2
0x0035	0x3000      	MOVLW      0
0x0036	0x00A5      	MOVWF      _CCPR+3
0x0037	0x0826      	MOVF       _current_period1, 0
0x0038	0x02A2      	SUBWF      _CCPR, 1
0x0039	0x0827      	MOVF       _current_period1+1, 0
0x003A	0x3BA3      	SUBWFB     _CCPR+1, 1
0x003B	0x0828      	MOVF       _current_period1+2, 0
0x003C	0x3BA4      	SUBWFB     _CCPR+2, 1
0x003D	0x0829      	MOVF       _current_period1+3, 0
0x003E	0x3BA5      	SUBWFB     _CCPR+3, 1
;pwm4m.c,25 :: 		}
0x003F	0x2849      	GOTO       L_interrupt5
L_interrupt4:
;pwm4m.c,28 :: 		M1 = 1;                               // set output to 1 in order to achieve "on-time"
0x0040	0x140D      	BSF        PORTB, 0
;pwm4m.c,29 :: 		CCPR = current_period1;                 // make it time for "on-time".
0x0041	0x0826      	MOVF       _current_period1, 0
0x0042	0x00A2      	MOVWF      _CCPR
0x0043	0x0827      	MOVF       _current_period1+1, 0
0x0044	0x00A3      	MOVWF      _CCPR+1
0x0045	0x0828      	MOVF       _current_period1+2, 0
0x0046	0x00A4      	MOVWF      _CCPR+2
0x0047	0x0829      	MOVF       _current_period1+3, 0
0x0048	0x00A5      	MOVWF      _CCPR+3
;pwm4m.c,30 :: 		}
L_interrupt5:
;pwm4m.c,31 :: 		}
0x0049	0x286D      	GOTO       L_interrupt6
L_interrupt3:
;pwm4m.c,33 :: 		if (current_period1 == total_period1) { M1 = 1;}             // if duty = 100%, then output 1 all the time.
0x004A	0x0829      	MOVF       _current_period1+3, 0
0x004B	0x3A00      	XORLW      0
0x004C	0x1D03      	BTFSS      STATUS, 2
0x004D	0x2858      	GOTO       L__interrupt43
0x004E	0x0828      	MOVF       _current_period1+2, 0
0x004F	0x3A00      	XORLW      0
0x0050	0x1D03      	BTFSS      STATUS, 2
0x0051	0x2858      	GOTO       L__interrupt43
0x0052	0x0827      	MOVF       _current_period1+1, 0
0x0053	0x3A30      	XORLW      48
0x0054	0x1D03      	BTFSS      STATUS, 2
0x0055	0x2858      	GOTO       L__interrupt43
0x0056	0x0826      	MOVF       _current_period1, 0
0x0057	0x3AD4      	XORLW      212
L__interrupt43:
0x0058	0x1D03      	BTFSS      STATUS, 2
0x0059	0x285B      	GOTO       L_interrupt7
0x005A	0x140D      	BSF        PORTB, 0
L_interrupt7:
;pwm4m.c,34 :: 		if (current_period1 == 0)            {M1 = 0;}              // if duty = 0%, then output 0 all the time.
0x005B	0x3000      	MOVLW      0
0x005C	0x00F0      	MOVWF      R0
0x005D	0x0629      	XORWF      _current_period1+3, 0
0x005E	0x1D03      	BTFSS      STATUS, 2
0x005F	0x286A      	GOTO       L__interrupt44
0x0060	0x0870      	MOVF       R0, 0
0x0061	0x0628      	XORWF      _current_period1+2, 0
0x0062	0x1D03      	BTFSS      STATUS, 2
0x0063	0x286A      	GOTO       L__interrupt44
0x0064	0x0870      	MOVF       R0, 0
0x0065	0x0627      	XORWF      _current_period1+1, 0
0x0066	0x1D03      	BTFSS      STATUS, 2
0x0067	0x286A      	GOTO       L__interrupt44
0x0068	0x0826      	MOVF       _current_period1, 0
0x0069	0x3A00      	XORLW      0
L__interrupt44:
0x006A	0x1D03      	BTFSS      STATUS, 2
0x006B	0x286D      	GOTO       L_interrupt8
0x006C	0x100D      	BCF        PORTB, 0
L_interrupt8:
;pwm4m.c,35 :: 		}
L_interrupt6:
;pwm4m.c,36 :: 		if ((current_period2 > 0) && (current_period2 < total_period2)){ // if duty is > 0% AND < 100% then:
0x006D	0x0831      	MOVF       _current_period2+3, 0
0x006E	0x3C00      	SUBLW      0
0x006F	0x1D03      	BTFSS      STATUS, 2
0x0070	0x287B      	GOTO       L__interrupt45
0x0071	0x0830      	MOVF       _current_period2+2, 0
0x0072	0x3C00      	SUBLW      0
0x0073	0x1D03      	BTFSS      STATUS, 2
0x0074	0x287B      	GOTO       L__interrupt45
0x0075	0x082F      	MOVF       _current_period2+1, 0
0x0076	0x3C00      	SUBLW      0
0x0077	0x1D03      	BTFSS      STATUS, 2
0x0078	0x287B      	GOTO       L__interrupt45
0x0079	0x082E      	MOVF       _current_period2, 0
0x007A	0x3C00      	SUBLW      0
L__interrupt45:
0x007B	0x1803      	BTFSC      STATUS, 0
0x007C	0x28AB      	GOTO       L_interrupt11
0x007D	0x3000      	MOVLW      0
0x007E	0x0231      	SUBWF      _current_period2+3, 0
0x007F	0x1D03      	BTFSS      STATUS, 2
0x0080	0x288B      	GOTO       L__interrupt46
0x0081	0x3000      	MOVLW      0
0x0082	0x0230      	SUBWF      _current_period2+2, 0
0x0083	0x1D03      	BTFSS      STATUS, 2
0x0084	0x288B      	GOTO       L__interrupt46
0x0085	0x3030      	MOVLW      48
0x0086	0x022F      	SUBWF      _current_period2+1, 0
0x0087	0x1D03      	BTFSS      STATUS, 2
0x0088	0x288B      	GOTO       L__interrupt46
0x0089	0x30D4      	MOVLW      212
0x008A	0x022E      	SUBWF      _current_period2, 0
L__interrupt46:
0x008B	0x1803      	BTFSC      STATUS, 0
0x008C	0x28AB      	GOTO       L_interrupt11
L__interrupt37:
;pwm4m.c,38 :: 		if (M2 == 1) {                           // if the output was 1 -> was "on-time".
0x008D	0x1F8C      	BTFSS      PORTA, 7
0x008E	0x28A1      	GOTO       L_interrupt12
;pwm4m.c,39 :: 		M2 = 0;                                  // set output to 0 in order to achieve "off-time".
0x008F	0x138C      	BCF        PORTA, 7
;pwm4m.c,40 :: 		CCPR = total_period2 - current_period2;     // make it time for "off-time", off-time = full time - on time.
0x0090	0x30D4      	MOVLW      212
0x0091	0x00A2      	MOVWF      _CCPR
0x0092	0x3030      	MOVLW      48
0x0093	0x00A3      	MOVWF      _CCPR+1
0x0094	0x3000      	MOVLW      0
0x0095	0x00A4      	MOVWF      _CCPR+2
0x0096	0x3000      	MOVLW      0
0x0097	0x00A5      	MOVWF      _CCPR+3
0x0098	0x082E      	MOVF       _current_period2, 0
0x0099	0x02A2      	SUBWF      _CCPR, 1
0x009A	0x082F      	MOVF       _current_period2+1, 0
0x009B	0x3BA3      	SUBWFB     _CCPR+1, 1
0x009C	0x0830      	MOVF       _current_period2+2, 0
0x009D	0x3BA4      	SUBWFB     _CCPR+2, 1
0x009E	0x0831      	MOVF       _current_period2+3, 0
0x009F	0x3BA5      	SUBWFB     _CCPR+3, 1
;pwm4m.c,41 :: 		}
0x00A0	0x28AA      	GOTO       L_interrupt13
L_interrupt12:
;pwm4m.c,44 :: 		M2 = 1;                               // set output to 1 in order to achieve "on-time"
0x00A1	0x178C      	BSF        PORTA, 7
;pwm4m.c,45 :: 		CCPR = current_period2;                 // make it time for "on-time".
0x00A2	0x082E      	MOVF       _current_period2, 0
0x00A3	0x00A2      	MOVWF      _CCPR
0x00A4	0x082F      	MOVF       _current_period2+1, 0
0x00A5	0x00A3      	MOVWF      _CCPR+1
0x00A6	0x0830      	MOVF       _current_period2+2, 0
0x00A7	0x00A4      	MOVWF      _CCPR+2
0x00A8	0x0831      	MOVF       _current_period2+3, 0
0x00A9	0x00A5      	MOVWF      _CCPR+3
;pwm4m.c,46 :: 		}
L_interrupt13:
;pwm4m.c,47 :: 		}
0x00AA	0x28CE      	GOTO       L_interrupt14
L_interrupt11:
;pwm4m.c,49 :: 		if (current_period2 == total_period2) { M2 = 1;}             // if duty = 100%, then output 1 all the time.
0x00AB	0x0831      	MOVF       _current_period2+3, 0
0x00AC	0x3A00      	XORLW      0
0x00AD	0x1D03      	BTFSS      STATUS, 2
0x00AE	0x28B9      	GOTO       L__interrupt47
0x00AF	0x0830      	MOVF       _current_period2+2, 0
0x00B0	0x3A00      	XORLW      0
0x00B1	0x1D03      	BTFSS      STATUS, 2
0x00B2	0x28B9      	GOTO       L__interrupt47
0x00B3	0x082F      	MOVF       _current_period2+1, 0
0x00B4	0x3A30      	XORLW      48
0x00B5	0x1D03      	BTFSS      STATUS, 2
0x00B6	0x28B9      	GOTO       L__interrupt47
0x00B7	0x082E      	MOVF       _current_period2, 0
0x00B8	0x3AD4      	XORLW      212
L__interrupt47:
0x00B9	0x1D03      	BTFSS      STATUS, 2
0x00BA	0x28BC      	GOTO       L_interrupt15
0x00BB	0x178C      	BSF        PORTA, 7
L_interrupt15:
;pwm4m.c,50 :: 		if (current_period2 == 0)            {M2 = 0;}              // if duty = 0%, then output 0 all the time.
0x00BC	0x3000      	MOVLW      0
0x00BD	0x00F0      	MOVWF      R0
0x00BE	0x0631      	XORWF      _current_period2+3, 0
0x00BF	0x1D03      	BTFSS      STATUS, 2
0x00C0	0x28CB      	GOTO       L__interrupt48
0x00C1	0x0870      	MOVF       R0, 0
0x00C2	0x0630      	XORWF      _current_period2+2, 0
0x00C3	0x1D03      	BTFSS      STATUS, 2
0x00C4	0x28CB      	GOTO       L__interrupt48
0x00C5	0x0870      	MOVF       R0, 0
0x00C6	0x062F      	XORWF      _current_period2+1, 0
0x00C7	0x1D03      	BTFSS      STATUS, 2
0x00C8	0x28CB      	GOTO       L__interrupt48
0x00C9	0x082E      	MOVF       _current_period2, 0
0x00CA	0x3A00      	XORLW      0
L__interrupt48:
0x00CB	0x1D03      	BTFSS      STATUS, 2
0x00CC	0x28CE      	GOTO       L_interrupt16
0x00CD	0x138C      	BCF        PORTA, 7
L_interrupt16:
;pwm4m.c,51 :: 		}
L_interrupt14:
;pwm4m.c,52 :: 		if ((current_period3 > 0) && (current_period3 < total_period3)){ // if duty is > 0% AND < 100% then:
0x00CE	0x0835      	MOVF       _current_period3+3, 0
0x00CF	0x3C00      	SUBLW      0
0x00D0	0x1D03      	BTFSS      STATUS, 2
0x00D1	0x28DC      	GOTO       L__interrupt49
0x00D2	0x0834      	MOVF       _current_period3+2, 0
0x00D3	0x3C00      	SUBLW      0
0x00D4	0x1D03      	BTFSS      STATUS, 2
0x00D5	0x28DC      	GOTO       L__interrupt49
0x00D6	0x0833      	MOVF       _current_period3+1, 0
0x00D7	0x3C00      	SUBLW      0
0x00D8	0x1D03      	BTFSS      STATUS, 2
0x00D9	0x28DC      	GOTO       L__interrupt49
0x00DA	0x0832      	MOVF       _current_period3, 0
0x00DB	0x3C00      	SUBLW      0
L__interrupt49:
0x00DC	0x1803      	BTFSC      STATUS, 0
0x00DD	0x290C      	GOTO       L_interrupt19
0x00DE	0x3000      	MOVLW      0
0x00DF	0x0235      	SUBWF      _current_period3+3, 0
0x00E0	0x1D03      	BTFSS      STATUS, 2
0x00E1	0x28EC      	GOTO       L__interrupt50
0x00E2	0x3000      	MOVLW      0
0x00E3	0x0234      	SUBWF      _current_period3+2, 0
0x00E4	0x1D03      	BTFSS      STATUS, 2
0x00E5	0x28EC      	GOTO       L__interrupt50
0x00E6	0x3030      	MOVLW      48
0x00E7	0x0233      	SUBWF      _current_period3+1, 0
0x00E8	0x1D03      	BTFSS      STATUS, 2
0x00E9	0x28EC      	GOTO       L__interrupt50
0x00EA	0x30D4      	MOVLW      212
0x00EB	0x0232      	SUBWF      _current_period3, 0
L__interrupt50:
0x00EC	0x1803      	BTFSC      STATUS, 0
0x00ED	0x290C      	GOTO       L_interrupt19
L__interrupt36:
;pwm4m.c,54 :: 		if (M3 == 1) {                           // if the output was 1 -> was "on-time".
0x00EE	0x1D8C      	BTFSS      PORTA, 3
0x00EF	0x2902      	GOTO       L_interrupt20
;pwm4m.c,55 :: 		M3 = 0;                                  // set output to 0 in order to achieve "off-time".
0x00F0	0x118C      	BCF        PORTA, 3
;pwm4m.c,56 :: 		CCPR = total_period3 - current_period3;     // make it time for "off-time", off-time = full time - on time.
0x00F1	0x30D4      	MOVLW      212
0x00F2	0x00A2      	MOVWF      _CCPR
0x00F3	0x3030      	MOVLW      48
0x00F4	0x00A3      	MOVWF      _CCPR+1
0x00F5	0x3000      	MOVLW      0
0x00F6	0x00A4      	MOVWF      _CCPR+2
0x00F7	0x3000      	MOVLW      0
0x00F8	0x00A5      	MOVWF      _CCPR+3
0x00F9	0x0832      	MOVF       _current_period3, 0
0x00FA	0x02A2      	SUBWF      _CCPR, 1
0x00FB	0x0833      	MOVF       _current_period3+1, 0
0x00FC	0x3BA3      	SUBWFB     _CCPR+1, 1
0x00FD	0x0834      	MOVF       _current_period3+2, 0
0x00FE	0x3BA4      	SUBWFB     _CCPR+2, 1
0x00FF	0x0835      	MOVF       _current_period3+3, 0
0x0100	0x3BA5      	SUBWFB     _CCPR+3, 1
;pwm4m.c,57 :: 		}
0x0101	0x290B      	GOTO       L_interrupt21
L_interrupt20:
;pwm4m.c,60 :: 		M3 = 1;                               // set output to 1 in order to achieve "on-time"
0x0102	0x158C      	BSF        PORTA, 3
;pwm4m.c,61 :: 		CCPR = current_period3;                 // make it time for "on-time".
0x0103	0x0832      	MOVF       _current_period3, 0
0x0104	0x00A2      	MOVWF      _CCPR
0x0105	0x0833      	MOVF       _current_period3+1, 0
0x0106	0x00A3      	MOVWF      _CCPR+1
0x0107	0x0834      	MOVF       _current_period3+2, 0
0x0108	0x00A4      	MOVWF      _CCPR+2
0x0109	0x0835      	MOVF       _current_period3+3, 0
0x010A	0x00A5      	MOVWF      _CCPR+3
;pwm4m.c,62 :: 		}
L_interrupt21:
;pwm4m.c,63 :: 		}
0x010B	0x292F      	GOTO       L_interrupt22
L_interrupt19:
;pwm4m.c,65 :: 		if (current_period3 == total_period3) { M3 = 1;}             // if duty = 100%, then output 1 all the time.
0x010C	0x0835      	MOVF       _current_period3+3, 0
0x010D	0x3A00      	XORLW      0
0x010E	0x1D03      	BTFSS      STATUS, 2
0x010F	0x291A      	GOTO       L__interrupt51
0x0110	0x0834      	MOVF       _current_period3+2, 0
0x0111	0x3A00      	XORLW      0
0x0112	0x1D03      	BTFSS      STATUS, 2
0x0113	0x291A      	GOTO       L__interrupt51
0x0114	0x0833      	MOVF       _current_period3+1, 0
0x0115	0x3A30      	XORLW      48
0x0116	0x1D03      	BTFSS      STATUS, 2
0x0117	0x291A      	GOTO       L__interrupt51
0x0118	0x0832      	MOVF       _current_period3, 0
0x0119	0x3AD4      	XORLW      212
L__interrupt51:
0x011A	0x1D03      	BTFSS      STATUS, 2
0x011B	0x291D      	GOTO       L_interrupt23
0x011C	0x158C      	BSF        PORTA, 3
L_interrupt23:
;pwm4m.c,66 :: 		if (current_period3 == 0)            {M3 = 0;}              // if duty = 0%, then output 0 all the time.
0x011D	0x3000      	MOVLW      0
0x011E	0x00F0      	MOVWF      R0
0x011F	0x0635      	XORWF      _current_period3+3, 0
0x0120	0x1D03      	BTFSS      STATUS, 2
0x0121	0x292C      	GOTO       L__interrupt52
0x0122	0x0870      	MOVF       R0, 0
0x0123	0x0634      	XORWF      _current_period3+2, 0
0x0124	0x1D03      	BTFSS      STATUS, 2
0x0125	0x292C      	GOTO       L__interrupt52
0x0126	0x0870      	MOVF       R0, 0
0x0127	0x0633      	XORWF      _current_period3+1, 0
0x0128	0x1D03      	BTFSS      STATUS, 2
0x0129	0x292C      	GOTO       L__interrupt52
0x012A	0x0832      	MOVF       _current_period3, 0
0x012B	0x3A00      	XORLW      0
L__interrupt52:
0x012C	0x1D03      	BTFSS      STATUS, 2
0x012D	0x292F      	GOTO       L_interrupt24
0x012E	0x118C      	BCF        PORTA, 3
L_interrupt24:
;pwm4m.c,67 :: 		}
L_interrupt22:
;pwm4m.c,68 :: 		if ((current_period4 > 0) && (current_period4 < total_period4)){ // if duty is > 0% AND < 100% then:
0x012F	0x082D      	MOVF       _current_period4+3, 0
0x0130	0x3C00      	SUBLW      0
0x0131	0x1D03      	BTFSS      STATUS, 2
0x0132	0x293D      	GOTO       L__interrupt53
0x0133	0x082C      	MOVF       _current_period4+2, 0
0x0134	0x3C00      	SUBLW      0
0x0135	0x1D03      	BTFSS      STATUS, 2
0x0136	0x293D      	GOTO       L__interrupt53
0x0137	0x082B      	MOVF       _current_period4+1, 0
0x0138	0x3C00      	SUBLW      0
0x0139	0x1D03      	BTFSS      STATUS, 2
0x013A	0x293D      	GOTO       L__interrupt53
0x013B	0x082A      	MOVF       _current_period4, 0
0x013C	0x3C00      	SUBLW      0
L__interrupt53:
0x013D	0x1803      	BTFSC      STATUS, 0
0x013E	0x296D      	GOTO       L_interrupt27
0x013F	0x3000      	MOVLW      0
0x0140	0x022D      	SUBWF      _current_period4+3, 0
0x0141	0x1D03      	BTFSS      STATUS, 2
0x0142	0x294D      	GOTO       L__interrupt54
0x0143	0x3000      	MOVLW      0
0x0144	0x022C      	SUBWF      _current_period4+2, 0
0x0145	0x1D03      	BTFSS      STATUS, 2
0x0146	0x294D      	GOTO       L__interrupt54
0x0147	0x3030      	MOVLW      48
0x0148	0x022B      	SUBWF      _current_period4+1, 0
0x0149	0x1D03      	BTFSS      STATUS, 2
0x014A	0x294D      	GOTO       L__interrupt54
0x014B	0x30D4      	MOVLW      212
0x014C	0x022A      	SUBWF      _current_period4, 0
L__interrupt54:
0x014D	0x1803      	BTFSC      STATUS, 0
0x014E	0x296D      	GOTO       L_interrupt27
L__interrupt35:
;pwm4m.c,70 :: 		if (M4 == 1) {                           // if the output was 1 -> was "on-time".
0x014F	0x1E0C      	BTFSS      PORTA, 4
0x0150	0x2963      	GOTO       L_interrupt28
;pwm4m.c,71 :: 		M4 = 0;                                  // set output to 0 in order to achieve "off-time".
0x0151	0x120C      	BCF        PORTA, 4
;pwm4m.c,72 :: 		CCPR = total_period4 - current_period4;     // make it time for "off-time", off-time = full time - on time.
0x0152	0x30D4      	MOVLW      212
0x0153	0x00A2      	MOVWF      _CCPR
0x0154	0x3030      	MOVLW      48
0x0155	0x00A3      	MOVWF      _CCPR+1
0x0156	0x3000      	MOVLW      0
0x0157	0x00A4      	MOVWF      _CCPR+2
0x0158	0x3000      	MOVLW      0
0x0159	0x00A5      	MOVWF      _CCPR+3
0x015A	0x082A      	MOVF       _current_period4, 0
0x015B	0x02A2      	SUBWF      _CCPR, 1
0x015C	0x082B      	MOVF       _current_period4+1, 0
0x015D	0x3BA3      	SUBWFB     _CCPR+1, 1
0x015E	0x082C      	MOVF       _current_period4+2, 0
0x015F	0x3BA4      	SUBWFB     _CCPR+2, 1
0x0160	0x082D      	MOVF       _current_period4+3, 0
0x0161	0x3BA5      	SUBWFB     _CCPR+3, 1
;pwm4m.c,73 :: 		}
0x0162	0x296C      	GOTO       L_interrupt29
L_interrupt28:
;pwm4m.c,76 :: 		M4 = 1;                               // set output to 1 in order to achieve "on-time"
0x0163	0x160C      	BSF        PORTA, 4
;pwm4m.c,77 :: 		CCPR = current_period4;                 // make it time for "on-time".
0x0164	0x082A      	MOVF       _current_period4, 0
0x0165	0x00A2      	MOVWF      _CCPR
0x0166	0x082B      	MOVF       _current_period4+1, 0
0x0167	0x00A3      	MOVWF      _CCPR+1
0x0168	0x082C      	MOVF       _current_period4+2, 0
0x0169	0x00A4      	MOVWF      _CCPR+2
0x016A	0x082D      	MOVF       _current_period4+3, 0
0x016B	0x00A5      	MOVWF      _CCPR+3
;pwm4m.c,78 :: 		}
L_interrupt29:
;pwm4m.c,79 :: 		}
0x016C	0x2990      	GOTO       L_interrupt30
L_interrupt27:
;pwm4m.c,81 :: 		if (current_period4 == total_period4) { M4 = 1;}             // if duty = 100%, then output 1 all the time.
0x016D	0x082D      	MOVF       _current_period4+3, 0
0x016E	0x3A00      	XORLW      0
0x016F	0x1D03      	BTFSS      STATUS, 2
0x0170	0x297B      	GOTO       L__interrupt55
0x0171	0x082C      	MOVF       _current_period4+2, 0
0x0172	0x3A00      	XORLW      0
0x0173	0x1D03      	BTFSS      STATUS, 2
0x0174	0x297B      	GOTO       L__interrupt55
0x0175	0x082B      	MOVF       _current_period4+1, 0
0x0176	0x3A30      	XORLW      48
0x0177	0x1D03      	BTFSS      STATUS, 2
0x0178	0x297B      	GOTO       L__interrupt55
0x0179	0x082A      	MOVF       _current_period4, 0
0x017A	0x3AD4      	XORLW      212
L__interrupt55:
0x017B	0x1D03      	BTFSS      STATUS, 2
0x017C	0x297E      	GOTO       L_interrupt31
0x017D	0x160C      	BSF        PORTA, 4
L_interrupt31:
;pwm4m.c,82 :: 		if (current_period4 == 0)            {M4 = 0;}              // if duty = 0%, then output 0 all the time.
0x017E	0x3000      	MOVLW      0
0x017F	0x00F0      	MOVWF      R0
0x0180	0x062D      	XORWF      _current_period4+3, 0
0x0181	0x1D03      	BTFSS      STATUS, 2
0x0182	0x298D      	GOTO       L__interrupt56
0x0183	0x0870      	MOVF       R0, 0
0x0184	0x062C      	XORWF      _current_period4+2, 0
0x0185	0x1D03      	BTFSS      STATUS, 2
0x0186	0x298D      	GOTO       L__interrupt56
0x0187	0x0870      	MOVF       R0, 0
0x0188	0x062B      	XORWF      _current_period4+1, 0
0x0189	0x1D03      	BTFSS      STATUS, 2
0x018A	0x298D      	GOTO       L__interrupt56
0x018B	0x082A      	MOVF       _current_period4, 0
0x018C	0x3A00      	XORLW      0
L__interrupt56:
0x018D	0x1D03      	BTFSS      STATUS, 2
0x018E	0x2990      	GOTO       L_interrupt32
0x018F	0x120C      	BCF        PORTA, 4
L_interrupt32:
;pwm4m.c,83 :: 		}
L_interrupt30:
;pwm4m.c,88 :: 		CCPR1H = CCPR >> 8;                       // right-shift CCPR by 8 then load it into CCPR1H register (load higher byte).
0x0190	0x0823      	MOVF       _CCPR+1, 0
0x0191	0x00F0      	MOVWF      R0
0x0192	0x0824      	MOVF       _CCPR+2, 0
0x0193	0x00F1      	MOVWF      R1
0x0194	0x0825      	MOVF       _CCPR+3, 0
0x0195	0x00F2      	MOVWF      R2
0x0196	0x01F3      	CLRF       R3
0x0197	0x0870      	MOVF       R0, 0
0x0198	0x0025      	MOVLB      5
0x0199	0x0092      	MOVWF      CCPR1H
;pwm4m.c,89 :: 		CCPR1L = CCPR;                            // put the lower byte of CCPR in CCPR1L register.
0x019A	0x0020      	MOVLB      0
0x019B	0x0822      	MOVF       _CCPR, 0
0x019C	0x0025      	MOVLB      5
0x019D	0x0091      	MOVWF      CCPR1L
;pwm4m.c,90 :: 		PIR1.CCP1IF = 0;                               // reset CCP1 interrupt flag.
0x019E	0x0020      	MOVLB      0
0x019F	0x1111      	BCF        PIR1, 2
;pwm4m.c,91 :: 		}
L_interrupt0:
;pwm4m.c,93 :: 		}
L_end_interrupt:
L__interrupt40:
0x01A0	0x0821      	MOVF       33, 0
0x01A1	0x00F0      	MOVWF      R0
0x01A2	0x0820      	MOVF       32, 0
0x01A3	0x00F1      	MOVWF      R1
0x01A4	0x0009      	RETFIE     %s
; end of _interrupt
___CC2DW:
;__Lib_System.c,71 :: 		
;__Lib_System.c,73 :: 		
_CC2DL_Loop1:
;__Lib_System.c,74 :: 		
0x01A5	0x0012      	MOVIW      FSR0++ 
;__Lib_System.c,75 :: 		
0x01A6	0x001E      	MOVWI      FSR1++ 
;__Lib_System.c,76 :: 		
0x01A7	0x03F0      	DECF       R0, 1
;__Lib_System.c,77 :: 		
0x01A8	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,78 :: 		
0x01A9	0x29A5      	GOTO       _CC2DL_Loop1
;__Lib_System.c,79 :: 		
0x01AA	0x03F1      	DECF       R1, 1
;__Lib_System.c,80 :: 		
0x01AB	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,81 :: 		
0x01AC	0x29A5      	GOTO       _CC2DL_Loop1
;__Lib_System.c,83 :: 		
L_end___CC2DW:
0x01AD	0x0008      	RETURN
; end of ___CC2DW
_main:
0x01AE	0x0020      	MOVLB      0
0x01AF	0x01A2      	CLRF       _CCPR
0x01B0	0x01A3      	CLRF       35
0x01B1	0x01A4      	CLRF       36
0x01B2	0x01A5      	CLRF       37
0x01B3	0x01A6      	CLRF       _current_period1
0x01B4	0x01A7      	CLRF       39
0x01B5	0x01A8      	CLRF       40
0x01B6	0x01A9      	CLRF       41
0x01B7	0x01AA      	CLRF       _current_period4
0x01B8	0x01AB      	CLRF       43
0x01B9	0x01AC      	CLRF       44
0x01BA	0x01AD      	CLRF       45
0x01BB	0x01AE      	CLRF       _current_period2
0x01BC	0x01AF      	CLRF       47
0x01BD	0x01B0      	CLRF       48
0x01BE	0x01B1      	CLRF       49
0x01BF	0x01B2      	CLRF       _current_period3
0x01C0	0x01B3      	CLRF       51
0x01C1	0x01B4      	CLRF       52
0x01C2	0x01B5      	CLRF       53
;pwm4m.c,97 :: 		void main() {
;pwm4m.c,99 :: 		ANSELA = 0;
0x01C3	0x0023      	MOVLB      3
0x01C4	0x018C      	CLRF       ANSELA
;pwm4m.c,100 :: 		ANSELB = 0;
0x01C5	0x018D      	CLRF       ANSELB
;pwm4m.c,101 :: 		TRISA = 0;                 // port c is output.
0x01C6	0x0021      	MOVLB      1
0x01C7	0x018C      	CLRF       TRISA
;pwm4m.c,102 :: 		TRISB = 0;
0x01C8	0x018D      	CLRF       TRISB
;pwm4m.c,103 :: 		PORTA = 0;
0x01C9	0x0020      	MOVLB      0
0x01CA	0x018C      	CLRF       PORTA
;pwm4m.c,104 :: 		PORTB = 0;                 // port c = 0.
0x01CB	0x018D      	CLRF       PORTB
;pwm4m.c,106 :: 		T1CON = 0b00110000;        // timer1 uses prescaler value of 8 and it is off.
0x01CC	0x3030      	MOVLW      48
0x01CD	0x0098      	MOVWF      T1CON
;pwm4m.c,107 :: 		TMR1H = 0;                 // timer1 registers have 0 (clear).
0x01CE	0x0197      	CLRF       TMR1H
;pwm4m.c,108 :: 		TMR1L = 0;
0x01CF	0x0196      	CLRF       TMR1L
;pwm4m.c,110 :: 		CCP1CON = 0x0b;            // set CCP module to compare mode and trigger special event when interrupt happens.
0x01D0	0x300B      	MOVLW      11
0x01D1	0x0025      	MOVLB      5
0x01D2	0x0093      	MOVWF      CCP1CON
;pwm4m.c,111 :: 		CCP2CON = 0x0b;            // set CCP module to compare mode and trigger special event when interrupt happens.
0x01D3	0x300B      	MOVLW      11
0x01D4	0x009A      	MOVWF      CCP2CON
;pwm4m.c,112 :: 		CCP3CON = 0x0b;            // set CCP module to compare mode and trigger special event when interrupt happens.
0x01D5	0x300B      	MOVLW      11
0x01D6	0x0026      	MOVLB      6
0x01D7	0x0093      	MOVWF      CCP3CON
;pwm4m.c,113 :: 		CCP4CON = 0x0b;            // set CCP module to compare mode and trigger special event when interrupt happens.
0x01D8	0x300B      	MOVLW      11
0x01D9	0x009A      	MOVWF      CCP4CON
;pwm4m.c,114 :: 		CCPR = 0;                  // load 0 in CCPR.
0x01DA	0x0020      	MOVLB      0
0x01DB	0x01A2      	CLRF       _CCPR
0x01DC	0x01A3      	CLRF       _CCPR+1
0x01DD	0x01A4      	CLRF       _CCPR+2
0x01DE	0x01A5      	CLRF       _CCPR+3
;pwm4m.c,115 :: 		PIR1.CCP1IF = 0;                // clear CCP1 interrupt flag.
0x01DF	0x1111      	BCF        PIR1, 2
;pwm4m.c,116 :: 		PIR2.CCP2IF = 0;                // clear CCP1 interrupt flag.
0x01E0	0x1012      	BCF        PIR2, 0
;pwm4m.c,117 :: 		PIR3.CCP3IF = 0;                // clear CCP1 interrupt flag.
0x01E1	0x1213      	BCF        PIR3, 4
;pwm4m.c,118 :: 		PIR3.CCP4IF = 0;                // clear CCP1 interrupt flag.
0x01E2	0x1293      	BCF        PIR3, 5
;pwm4m.c,119 :: 		PIE1.CCP1IE = 1;                // enable CCP1 interrupt.
0x01E3	0x0021      	MOVLB      1
0x01E4	0x1511      	BSF        PIE1, 2
;pwm4m.c,120 :: 		PIE2.CCP2IE = 1;                // enable CCP1 interrupt.
0x01E5	0x1412      	BSF        PIE2, 0
;pwm4m.c,121 :: 		PIE3.CCP3IE = 1;                // enable CCP1 interrupt.
0x01E6	0x1613      	BSF        PIE3, 4
;pwm4m.c,122 :: 		PIE3.CCP4IE = 1;                // enable CCP1 interrupt.
0x01E7	0x1693      	BSF        PIE3, 5
;pwm4m.c,123 :: 		INTCON = 0xC0;             // enable global and peripheral interrupt.
0x01E8	0x30C0      	MOVLW      192
0x01E9	0x008B      	MOVWF      INTCON
;pwm4m.c,124 :: 		T1CON = 0b00110001;        // start timer1 with the same settings like before.
0x01EA	0x3031      	MOVLW      49
0x01EB	0x0020      	MOVLB      0
0x01EC	0x0098      	MOVWF      T1CON
;pwm4m.c,129 :: 		while (1) {                                          // infinite loop.
L_main33:
;pwm4m.c,134 :: 		current_period1 = total_period1 * 0.9;            // 50% duty cycle.
0x01ED	0x30F2      	MOVLW      242
0x01EE	0x00A6      	MOVWF      _current_period1
0x01EF	0x302B      	MOVLW      43
0x01F0	0x00A7      	MOVWF      _current_period1+1
0x01F1	0x01A8      	CLRF       _current_period1+2
0x01F2	0x01A9      	CLRF       _current_period1+3
;pwm4m.c,135 :: 		current_period2 = total_period2 * 0.5;            // 50% duty cycle.
0x01F3	0x306A      	MOVLW      106
0x01F4	0x00AE      	MOVWF      _current_period2
0x01F5	0x3018      	MOVLW      24
0x01F6	0x00AF      	MOVWF      _current_period2+1
0x01F7	0x01B0      	CLRF       _current_period2+2
0x01F8	0x01B1      	CLRF       _current_period2+3
;pwm4m.c,136 :: 		current_period3 = total_period3 * 0.2;            // 50% duty cycle.
0x01F9	0x30C4      	MOVLW      196
0x01FA	0x00B2      	MOVWF      _current_period3
0x01FB	0x3009      	MOVLW      9
0x01FC	0x00B3      	MOVWF      _current_period3+1
0x01FD	0x01B4      	CLRF       _current_period3+2
0x01FE	0x01B5      	CLRF       _current_period3+3
;pwm4m.c,137 :: 		current_period4 = total_period4 * 0.9;            // 50% duty cycle.
0x01FF	0x30F2      	MOVLW      242
0x0200	0x00AA      	MOVWF      _current_period4
0x0201	0x302B      	MOVLW      43
0x0202	0x00AB      	MOVWF      _current_period4+1
0x0203	0x01AC      	CLRF       _current_period4+2
0x0204	0x01AD      	CLRF       _current_period4+3
;pwm4m.c,138 :: 		}                                           }
0x0205	0x29ED      	GOTO       L_main33
L_end_main:
0x0206	0x2A06      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [417]    _interrupt
0x01A5       [9]    ___CC2DW
0x01AE      [89]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF0
0x0001       [1]    INDF1
0x0003       [1]    STATUS
0x0004       [1]    FSR0L
0x0005       [1]    FSR0H
0x0006       [1]    FSR1L
0x0007       [1]    FSR1H
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PORTA
0x000D       [1]    PORTB
0x0011       [1]    PIR1
0x0012       [1]    PIR2
0x0013       [1]    PIR3
0x0016       [1]    TMR1L
0x0017       [1]    TMR1H
0x0018       [1]    T1CON
0x0022       [4]    _CCPR
0x0026       [4]    _current_period1
0x002A       [4]    _current_period4
0x002E       [4]    _current_period2
0x0032       [4]    _current_period3
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x008C       [1]    TRISA
0x008D       [1]    TRISB
0x0091       [1]    PIE1
0x0092       [1]    PIE2
0x0093       [1]    PIE3
0x018C       [1]    ANSELA
0x018D       [1]    ANSELB
0x0291       [1]    CCPR1L
0x0292       [1]    CCPR1H
0x0293       [1]    CCP1CON
0x029A       [1]    CCP2CON
0x0313       [1]    CCP3CON
0x031A       [1]    CCP4CON
