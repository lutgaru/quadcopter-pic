;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 20/11/2016 04:35:48 p. m.
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x28EC      	GOTO       236
_interrupt:
;icaros1.c,33 :: 		void interrupt() {
0x0004	0x0870      	MOVF       R0, 0
0x0005	0x0020      	MOVLB      0
0x0006	0x00A1      	MOVWF      33
0x0007	0x0871      	MOVF       R1, 0
0x0008	0x00A0      	MOVWF      32
;icaros1.c,34 :: 		if (PIR1.CCP1IF == 1) {                           // if CCP compare interrupt flag is set
0x0009	0x3180      	MOVLP      0
0x000A	0x1D11      	BTFSS      PIR1, 2
0x000B	0x2881      	GOTO       L_interrupt0
;icaros1.c,37 :: 		if ((current_period > 0) && (current_period < total_period)){ // if duty is > 0% AND < 100% then:
0x000C	0x0829      	MOVF       _current_period+3, 0
0x000D	0x3C00      	SUBLW      0
0x000E	0x1D03      	BTFSS      STATUS, 2
0x000F	0x281A      	GOTO       L__interrupt15
0x0010	0x0828      	MOVF       _current_period+2, 0
0x0011	0x3C00      	SUBLW      0
0x0012	0x1D03      	BTFSS      STATUS, 2
0x0013	0x281A      	GOTO       L__interrupt15
0x0014	0x0827      	MOVF       _current_period+1, 0
0x0015	0x3C00      	SUBLW      0
0x0016	0x1D03      	BTFSS      STATUS, 2
0x0017	0x281A      	GOTO       L__interrupt15
0x0018	0x0826      	MOVF       _current_period, 0
0x0019	0x3C00      	SUBLW      0
L__interrupt15:
0x001A	0x1803      	BTFSC      STATUS, 0
0x001B	0x284C      	GOTO       L_interrupt3
0x001C	0x3000      	MOVLW      0
0x001D	0x0229      	SUBWF      _current_period+3, 0
0x001E	0x1D03      	BTFSS      STATUS, 2
0x001F	0x282A      	GOTO       L__interrupt16
0x0020	0x3000      	MOVLW      0
0x0021	0x0228      	SUBWF      _current_period+2, 0
0x0022	0x1D03      	BTFSS      STATUS, 2
0x0023	0x282A      	GOTO       L__interrupt16
0x0024	0x3030      	MOVLW      48
0x0025	0x0227      	SUBWF      _current_period+1, 0
0x0026	0x1D03      	BTFSS      STATUS, 2
0x0027	0x282A      	GOTO       L__interrupt16
0x0028	0x30D4      	MOVLW      212
0x0029	0x0226      	SUBWF      _current_period, 0
L__interrupt16:
0x002A	0x1803      	BTFSC      STATUS, 0
0x002B	0x284C      	GOTO       L_interrupt3
L__interrupt11:
;icaros1.c,39 :: 		if (MOT1 == 1) {                           // if the MOT1put was 1 -> was "on-time".
0x002C	0x1C0D      	BTFSS      RB0_bit, BitPos(RB0_bit+0)
0x002D	0x2841      	GOTO       L_interrupt4
;icaros1.c,40 :: 		MOT1 = 0;
0x002E	0x100D      	BCF        RB0_bit, BitPos(RB0_bit+0)
;icaros1.c,41 :: 		MOT2 = 0;                                  // set MOT1put to 0 in order to achieve "off-time".
0x002F	0x138C      	BCF        RA7_bit, BitPos(RA7_bit+0)
;icaros1.c,42 :: 		CCPR = total_period - current_period;     // make it time for "off-time", off-time = full time - on time.
0x0030	0x30D4      	MOVLW      212
0x0031	0x00A2      	MOVWF      _CCPR
0x0032	0x3030      	MOVLW      48
0x0033	0x00A3      	MOVWF      _CCPR+1
0x0034	0x3000      	MOVLW      0
0x0035	0x00A4      	MOVWF      _CCPR+2
0x0036	0x3000      	MOVLW      0
0x0037	0x00A5      	MOVWF      _CCPR+3
0x0038	0x0826      	MOVF       _current_period, 0
0x0039	0x02A2      	SUBWF      _CCPR, 1
0x003A	0x0827      	MOVF       _current_period+1, 0
0x003B	0x3BA3      	SUBWFB     _CCPR+1, 1
0x003C	0x0828      	MOVF       _current_period+2, 0
0x003D	0x3BA4      	SUBWFB     _CCPR+2, 1
0x003E	0x0829      	MOVF       _current_period+3, 0
0x003F	0x3BA5      	SUBWFB     _CCPR+3, 1
;icaros1.c,43 :: 		}
0x0040	0x284B      	GOTO       L_interrupt5
L_interrupt4:
;icaros1.c,46 :: 		MOT1 = 1;                               // set MOT1put to 1 in order to achieve "on-time"
0x0041	0x140D      	BSF        RB0_bit, BitPos(RB0_bit+0)
;icaros1.c,47 :: 		MOT2 = 1;
0x0042	0x178C      	BSF        RA7_bit, BitPos(RA7_bit+0)
;icaros1.c,48 :: 		CCPR = current_period;                 // make it time for "on-time".
0x0043	0x0826      	MOVF       _current_period, 0
0x0044	0x00A2      	MOVWF      _CCPR
0x0045	0x0827      	MOVF       _current_period+1, 0
0x0046	0x00A3      	MOVWF      _CCPR+1
0x0047	0x0828      	MOVF       _current_period+2, 0
0x0048	0x00A4      	MOVWF      _CCPR+2
0x0049	0x0829      	MOVF       _current_period+3, 0
0x004A	0x00A5      	MOVWF      _CCPR+3
;icaros1.c,49 :: 		}
L_interrupt5:
;icaros1.c,50 :: 		}
0x004B	0x2871      	GOTO       L_interrupt6
L_interrupt3:
;icaros1.c,52 :: 		if (current_period == total_period) { MOT1 = 1;MOT2 = 1;}             // if duty = 100%, then MOT1put 1 all the time.
0x004C	0x0829      	MOVF       _current_period+3, 0
0x004D	0x3A00      	XORLW      0
0x004E	0x1D03      	BTFSS      STATUS, 2
0x004F	0x285A      	GOTO       L__interrupt17
0x0050	0x0828      	MOVF       _current_period+2, 0
0x0051	0x3A00      	XORLW      0
0x0052	0x1D03      	BTFSS      STATUS, 2
0x0053	0x285A      	GOTO       L__interrupt17
0x0054	0x0827      	MOVF       _current_period+1, 0
0x0055	0x3A30      	XORLW      48
0x0056	0x1D03      	BTFSS      STATUS, 2
0x0057	0x285A      	GOTO       L__interrupt17
0x0058	0x0826      	MOVF       _current_period, 0
0x0059	0x3AD4      	XORLW      212
L__interrupt17:
0x005A	0x1D03      	BTFSS      STATUS, 2
0x005B	0x285E      	GOTO       L_interrupt7
0x005C	0x140D      	BSF        RB0_bit, BitPos(RB0_bit+0)
0x005D	0x178C      	BSF        RA7_bit, BitPos(RA7_bit+0)
L_interrupt7:
;icaros1.c,53 :: 		if (current_period == 0)            {MOT1 = 0;MOT2 = 0;}              // if duty = 0%, then MOT1put 0 all the time.
0x005E	0x3000      	MOVLW      0
0x005F	0x00F0      	MOVWF      R0
0x0060	0x0629      	XORWF      _current_period+3, 0
0x0061	0x1D03      	BTFSS      STATUS, 2
0x0062	0x286D      	GOTO       L__interrupt18
0x0063	0x0870      	MOVF       R0, 0
0x0064	0x0628      	XORWF      _current_period+2, 0
0x0065	0x1D03      	BTFSS      STATUS, 2
0x0066	0x286D      	GOTO       L__interrupt18
0x0067	0x0870      	MOVF       R0, 0
0x0068	0x0627      	XORWF      _current_period+1, 0
0x0069	0x1D03      	BTFSS      STATUS, 2
0x006A	0x286D      	GOTO       L__interrupt18
0x006B	0x0826      	MOVF       _current_period, 0
0x006C	0x3A00      	XORLW      0
L__interrupt18:
0x006D	0x1D03      	BTFSS      STATUS, 2
0x006E	0x2871      	GOTO       L_interrupt8
0x006F	0x100D      	BCF        RB0_bit, BitPos(RB0_bit+0)
0x0070	0x138C      	BCF        RA7_bit, BitPos(RA7_bit+0)
L_interrupt8:
;icaros1.c,54 :: 		}
L_interrupt6:
;icaros1.c,59 :: 		CCPR1H = CCPR >> 8;                       // right-shift CCPR by 8 then load it into CCPR1H register (load higher byte).
0x0071	0x0823      	MOVF       _CCPR+1, 0
0x0072	0x00F0      	MOVWF      R0
0x0073	0x0824      	MOVF       _CCPR+2, 0
0x0074	0x00F1      	MOVWF      R1
0x0075	0x0825      	MOVF       _CCPR+3, 0
0x0076	0x00F2      	MOVWF      R2
0x0077	0x01F3      	CLRF       R3
0x0078	0x0870      	MOVF       R0, 0
0x0079	0x0025      	MOVLB      5
0x007A	0x0092      	MOVWF      CCPR1H
;icaros1.c,60 :: 		CCPR1L = CCPR;                            // put the lower byte of CCPR in CCPR1L register.
0x007B	0x0020      	MOVLB      0
0x007C	0x0822      	MOVF       _CCPR, 0
0x007D	0x0025      	MOVLB      5
0x007E	0x0091      	MOVWF      CCPR1L
;icaros1.c,61 :: 		PIR1.CCP1IF = 0;                               // reset CCP1 interrupt flag.
0x007F	0x0020      	MOVLB      0
0x0080	0x1111      	BCF        PIR1, 2
;icaros1.c,62 :: 		}
L_interrupt0:
;icaros1.c,63 :: 		}
L_end_interrupt:
L__interrupt14:
0x0081	0x0821      	MOVF       33, 0
0x0082	0x00F0      	MOVWF      R0
0x0083	0x0820      	MOVF       32, 0
0x0084	0x00F1      	MOVWF      R1
0x0085	0x0009      	RETFIE     %s
; end of _interrupt
_UART1_Init:
;__Lib_UART_b21.c,12 :: 		
;__Lib_UART_b21.c,15 :: 		
0x0086	0x30FF      	MOVLW      _UART1_Write
0x0087	0x0020      	MOVLB      0
0x0088	0x00B6      	MOVWF      _UART_Wr_Ptr
0x0089	0x30FF      	MOVLW      hi_addr(_UART1_Write)
0x008A	0x00B7      	MOVWF      _UART_Wr_Ptr+1
0x008B	0x30FF      	MOVLW      FARG_UART1_Write_data_
0x008C	0x00B8      	MOVWF      _UART_Wr_Ptr+2
0x008D	0x30FF      	MOVLW      hi_addr(FARG_UART1_Write_data_)
0x008E	0x00B9      	MOVWF      _UART_Wr_Ptr+3
;__Lib_UART_b21.c,16 :: 		
0x008F	0x30FF      	MOVLW      _UART1_Read
0x0090	0x00AA      	MOVWF      _UART_Rd_Ptr
0x0091	0x30FF      	MOVLW      hi_addr(_UART1_Read)
0x0092	0x00AB      	MOVWF      _UART_Rd_Ptr+1
0x0093	0x3000      	MOVLW      0
0x0094	0x00AC      	MOVWF      _UART_Rd_Ptr+2
0x0095	0x3000      	MOVLW      0
0x0096	0x00AD      	MOVWF      _UART_Rd_Ptr+3
;__Lib_UART_b21.c,17 :: 		
0x0097	0x30FF      	MOVLW      _UART1_Data_Ready
0x0098	0x00AE      	MOVWF      _UART_Rdy_Ptr
0x0099	0x30FF      	MOVLW      hi_addr(_UART1_Data_Ready)
0x009A	0x00AF      	MOVWF      _UART_Rdy_Ptr+1
0x009B	0x3000      	MOVLW      0
0x009C	0x00B0      	MOVWF      _UART_Rdy_Ptr+2
0x009D	0x3000      	MOVLW      0
0x009E	0x00B1      	MOVWF      _UART_Rdy_Ptr+3
;__Lib_UART_b21.c,18 :: 		
0x009F	0x30FF      	MOVLW      _UART1_Tx_Idle
0x00A0	0x00B2      	MOVWF      _UART_Tx_Idle_Ptr
0x00A1	0x30FF      	MOVLW      hi_addr(_UART1_Tx_Idle)
0x00A2	0x00B3      	MOVWF      _UART_Tx_Idle_Ptr+1
0x00A3	0x3000      	MOVLW      0
0x00A4	0x00B4      	MOVWF      _UART_Tx_Idle_Ptr+2
0x00A5	0x3000      	MOVLW      0
0x00A6	0x00B5      	MOVWF      _UART_Tx_Idle_Ptr+3
;__Lib_UART_b21.c,20 :: 		
0x00A7	0x0023      	MOVLB      3
0x00A8	0x169E      	BSF        TXSTA, 5
;__Lib_UART_b21.c,21 :: 		
0x00A9	0x3090      	MOVLW      144
0x00AA	0x009D      	MOVWF      RCSTA
;__Lib_UART_b21.c,22 :: 		
0x00AB	0x0021      	MOVLB      1
0x00AC	0x148D      	BSF        TRISB1_bit, BitPos(TRISB1_bit+0)
;__Lib_UART_b21.c,23 :: 		
0x00AD	0x110D      	BCF        TRISB2_bit, BitPos(TRISB2_bit+0)
;__Lib_UART_b21.c,24 :: 		
L_UART1_Init0:
0x00AE	0x0020      	MOVLB      0
0x00AF	0x1E91      	BTFSS      PIR1, 5
0x00B0	0x28B5      	GOTO       L_UART1_Init1
;__Lib_UART_b21.c,25 :: 		
0x00B1	0x0023      	MOVLB      3
0x00B2	0x0819      	MOVF       RCREG, 0
0x00B3	0x00F0      	MOVWF      R0
0x00B4	0x28AE      	GOTO       L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_b21.c,26 :: 		
L_end_UART1_Init:
0x00B5	0x0008      	RETURN
; end of _UART1_Init
___CC2DW:
;__Lib_System.c,71 :: 		
;__Lib_System.c,73 :: 		
_CC2DL_Loop1:
;__Lib_System.c,74 :: 		
0x00B6	0x0012      	MOVIW      FSR0++ 
;__Lib_System.c,75 :: 		
0x00B7	0x001E      	MOVWI      FSR1++ 
;__Lib_System.c,76 :: 		
0x00B8	0x03F0      	DECF       R0, 1
;__Lib_System.c,77 :: 		
0x00B9	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,78 :: 		
0x00BA	0x28B6      	GOTO       _CC2DL_Loop1
;__Lib_System.c,79 :: 		
0x00BB	0x03F1      	DECF       R1, 1
;__Lib_System.c,80 :: 		
0x00BC	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,81 :: 		
0x00BD	0x28B6      	GOTO       _CC2DL_Loop1
;__Lib_System.c,83 :: 		
L_end___CC2DW:
0x00BE	0x0008      	RETURN
; end of ___CC2DW
_init:
;icaros1.c,10 :: 		void init(){
;icaros1.c,12 :: 		CM1CON0 = 0;
0x00BF	0x0022      	MOVLB      2
0x00C0	0x0191      	CLRF       CM1CON0
;icaros1.c,13 :: 		CM2CON0 = 0;
0x00C1	0x0193      	CLRF       CM2CON0
;icaros1.c,14 :: 		TRISA = 0x19;
0x00C2	0x3019      	MOVLW      25
0x00C3	0x0021      	MOVLB      1
0x00C4	0x008C      	MOVWF      TRISA
;icaros1.c,15 :: 		TRISB = 0x02;
0x00C5	0x3002      	MOVLW      2
0x00C6	0x008D      	MOVWF      TRISB
;icaros1.c,16 :: 		PORTB = 0x00;
0x00C7	0x0020      	MOVLB      0
0x00C8	0x018D      	CLRF       PORTB
;icaros1.c,17 :: 		PORTA = 0x00;
0x00C9	0x018C      	CLRF       PORTA
;icaros1.c,18 :: 		T1CON = 0b00110000;        // timer1 uses prescaler value of 8 and it is off.
0x00CA	0x3030      	MOVLW      48
0x00CB	0x0098      	MOVWF      T1CON
;icaros1.c,19 :: 		TMR1H = 0;                 // timer1 registers have 0 (clear).
0x00CC	0x0197      	CLRF       TMR1H
;icaros1.c,20 :: 		TMR1L = 0;
0x00CD	0x0196      	CLRF       TMR1L
;icaros1.c,21 :: 		CCP1CON = 0x0B;            // set CCP module to compare mode and trigger special event when interrupt happens.
0x00CE	0x300B      	MOVLW      11
0x00CF	0x0025      	MOVLB      5
0x00D0	0x0093      	MOVWF      CCP1CON
;icaros1.c,22 :: 		CCPR = 0;                  // load 0 in CCPR.
0x00D1	0x0020      	MOVLB      0
0x00D2	0x01A2      	CLRF       _CCPR
0x00D3	0x01A3      	CLRF       _CCPR+1
0x00D4	0x01A4      	CLRF       _CCPR+2
0x00D5	0x01A5      	CLRF       _CCPR+3
;icaros1.c,23 :: 		PIR1.CCP1IF = 0;                // clear CCP1 interrupt flag.
0x00D6	0x1111      	BCF        PIR1, 2
;icaros1.c,24 :: 		PIE1.CCP1IE = 1;                // enable CCP1 interrupt.
0x00D7	0x0021      	MOVLB      1
0x00D8	0x1511      	BSF        PIE1, 2
;icaros1.c,25 :: 		INTCON = 0xC0;             // enable global and peripheral interrupt.
0x00D9	0x30C0      	MOVLW      192
0x00DA	0x008B      	MOVWF      INTCON
;icaros1.c,26 :: 		T1CON = 0b00110101;        // start timer1 with the same settings like before.
0x00DB	0x3035      	MOVLW      53
0x00DC	0x0020      	MOVLB      0
0x00DD	0x0098      	MOVWF      T1CON
;icaros1.c,27 :: 		ANSELA= 0x00;
0x00DE	0x0023      	MOVLB      3
0x00DF	0x018C      	CLRF       ANSELA
;icaros1.c,28 :: 		ANSELB= 0x00;
0x00E0	0x018D      	CLRF       ANSELB
;icaros1.c,29 :: 		TXCKSEL_bit=1;
0x00E1	0x0022      	MOVLB      2
0x00E2	0x141E      	BSF        TXCKSEL_bit, BitPos(TXCKSEL_bit+0)
;icaros1.c,30 :: 		RXDTSEL_bit=1;
0x00E3	0x179D      	BSF        RXDTSEL_bit, BitPos(RXDTSEL_bit+0)
;icaros1.c,31 :: 		UART1_Init(9600);
0x00E4	0x0023      	MOVLB      3
0x00E5	0x159F      	BSF        BAUDCON, 3
0x00E6	0x30CF      	MOVLW      207
0x00E7	0x009B      	MOVWF      SPBRG
0x00E8	0x019C      	CLRF       SPBRG+1
0x00E9	0x151E      	BSF        TXSTA, 2
0x00EA	0x2086      	CALL       _UART1_Init
;icaros1.c,32 :: 		}
L_end_init:
0x00EB	0x0008      	RETURN
; end of _init
_main:
0x00EC	0x0020      	MOVLB      0
0x00ED	0x01A2      	CLRF       _CCPR
0x00EE	0x01A3      	CLRF       35
0x00EF	0x01A4      	CLRF       36
0x00F0	0x01A5      	CLRF       37
0x00F1	0x01A6      	CLRF       _current_period
0x00F2	0x01A7      	CLRF       39
0x00F3	0x01A8      	CLRF       40
0x00F4	0x01A9      	CLRF       41
;icaros1.c,67 :: 		void main() {
;icaros1.c,68 :: 		init();
0x00F5	0x20BF      	CALL       _init
;icaros1.c,69 :: 		while(1){
L_main9:
;icaros1.c,70 :: 		current_period = total_period * 0.5;            // 50% duty cycle.
0x00F6	0x306A      	MOVLW      106
0x00F7	0x0020      	MOVLB      0
0x00F8	0x00A6      	MOVWF      _current_period
0x00F9	0x3018      	MOVLW      24
0x00FA	0x00A7      	MOVWF      _current_period+1
0x00FB	0x01A8      	CLRF       _current_period+2
0x00FC	0x01A9      	CLRF       _current_period+3
;icaros1.c,71 :: 		}
0x00FD	0x28F6      	GOTO       L_main9
;icaros1.c,75 :: 		}
L_end_main:
0x00FE	0x28FE      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [130]    _interrupt
0x0086      [48]    _UART1_Init
0x00B6       [9]    ___CC2DW
0x00BF      [45]    _init
0x00EC      [19]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF0
0x0001       [1]    INDF1
0x0003       [1]    STATUS
0x0004       [1]    FSR0L
0x0005       [1]    FSR0H
0x0006       [1]    FSR1L
0x0007       [1]    FSR1H
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PORTA
0x000C       [0]    RA7_bit
0x000D       [1]    PORTB
0x000D       [0]    RB0_bit
0x0011       [1]    PIR1
0x0016       [1]    TMR1L
0x0017       [1]    TMR1H
0x0018       [1]    T1CON
0x0022       [4]    _CCPR
0x0026       [4]    _current_period
0x002A       [4]    _UART_Rd_Ptr
0x002E       [4]    _UART_Rdy_Ptr
0x0032       [4]    _UART_Tx_Idle_Ptr
0x0036       [4]    _UART_Wr_Ptr
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x008C       [1]    TRISA
0x008D       [1]    TRISB
0x008D       [0]    TRISB2_bit
0x008D       [0]    TRISB1_bit
0x0091       [1]    PIE1
0x0111       [1]    CM1CON0
0x0113       [1]    CM2CON0
0x011D       [0]    RXDTSEL_bit
0x011E       [0]    TXCKSEL_bit
0x018C       [1]    ANSELA
0x018D       [1]    ANSELB
0x0199       [1]    RCREG
0x019B       [2]    SPBRG
0x019C       [1]    SPBRGH
0x019D       [1]    RCSTA
0x019E       [1]    TXSTA
0x019F       [1]    BAUDCON
0x0291       [1]    CCPR1L
0x0292       [1]    CCPR1H
0x0293       [1]    CCP1CON
